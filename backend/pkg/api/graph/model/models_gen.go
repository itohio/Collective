// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Asset struct {
	ID          string             `json:"id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	Type        AssetType          `json:"type"`
	EventCaps   []*EventCapability `json:"eventCaps"`
	ImageURL    string             `json:"imageUrl"`
	Disabled    bool               `json:"disabled"`
	CreatedAt   string             `json:"createdAt"`
	UpdatedAt   *string            `json:"updatedAt"`
}

type AssetInput struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Type        AssetType `json:"type"`
	ImageURL    string    `json:"imageUrl"`
	Disabled    bool      `json:"disabled"`
}

type EventCapability struct {
	ID          string `json:"id"`
	Code        int    `json:"code"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type Member struct {
	ID        string       `json:"id"`
	User      *User        `json:"user"`
	Disabled  bool         `json:"disabled"`
	Roles     []MemberRole `json:"roles"`
	CreatedAt string       `json:"createdAt"`
	UpdatedAt *string      `json:"updatedAt"`
}

type MemberInput struct {
	UserID string       `json:"userId"`
	Roles  []MemberRole `json:"roles"`
}

type Organization struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Type        AssetType `json:"type"`
	Wallet      *Wallet   `json:"wallet"`
	Assets      []*Asset  `json:"assets"`
	Members     []*Member `json:"members"`
	CreatedAt   string    `json:"createdAt"`
	UpdatedAt   *string   `json:"updatedAt"`
}

type OrganizationInput struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Type        AssetType `json:"type"`
	WalletID    *string   `json:"walletId"`
}

type Session struct {
	ID        string  `json:"id"`
	Active    bool    `json:"active"`
	User      *User   `json:"user"`
	Asset     *Asset  `json:"asset"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt *string `json:"updatedAt"`
}

type SessionInput struct {
	UserID   string  `json:"userId"`
	AssetID  string  `json:"assetId"`
	Active   bool    `json:"active"`
	WalletID *string `json:"walletId"`
}

type User struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	NickName  string  `json:"nickName"`
	AvatarURL string  `json:"avatarUrl"`
	Email     string  `json:"email"`
	Wallet    *Wallet `json:"wallet"`
	Disabled  bool    `json:"disabled"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt *string `json:"updatedAt"`
}

type UserInput struct {
	Name      string  `json:"name"`
	Email     string  `json:"email"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	NickName  string  `json:"nickName"`
	AvatarURL string  `json:"avatarUrl"`
	WalletID  *string `json:"walletId"`
	Disabled  bool    `json:"disabled"`
}

type Wallet struct {
	ID         string `json:"id"`
	EthAddress string `json:"ethAddress"`
}

type WalletInput struct {
	EthAddress string `json:"ethAddress"`
}

type AssetType string

const (
	AssetTypeDeleted     AssetType = "DELETED"
	AssetTypePrivate     AssetType = "PRIVATE"
	AssetTypeMembersOnly AssetType = "MEMBERS_ONLY"
	AssetTypePublic      AssetType = "PUBLIC"
	AssetTypeCommercial  AssetType = "COMMERCIAL"
)

var AllAssetType = []AssetType{
	AssetTypeDeleted,
	AssetTypePrivate,
	AssetTypeMembersOnly,
	AssetTypePublic,
	AssetTypeCommercial,
}

func (e AssetType) IsValid() bool {
	switch e {
	case AssetTypeDeleted, AssetTypePrivate, AssetTypeMembersOnly, AssetTypePublic, AssetTypeCommercial:
		return true
	}
	return false
}

func (e AssetType) String() string {
	return string(e)
}

func (e *AssetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AssetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AssetType", str)
	}
	return nil
}

func (e AssetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MemberRole string

const (
	MemberRoleOwner    MemberRole = "OWNER"
	MemberRoleAdmin    MemberRole = "ADMIN"
	MemberRoleTeammate MemberRole = "TEAMMATE"
)

var AllMemberRole = []MemberRole{
	MemberRoleOwner,
	MemberRoleAdmin,
	MemberRoleTeammate,
}

func (e MemberRole) IsValid() bool {
	switch e {
	case MemberRoleOwner, MemberRoleAdmin, MemberRoleTeammate:
		return true
	}
	return false
}

func (e MemberRole) String() string {
	return string(e)
}

func (e *MemberRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MemberRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MemberRole", str)
	}
	return nil
}

func (e MemberRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
